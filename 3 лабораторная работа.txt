
#1

class Soda:  #создание класса Soda
    def __init__(self, addon):
        self.addon = addon

    def show_my_drink(self):
        if self.addon:
            print(f"добавка{self.addon}")
        else:
            print("Обычная газировка")




soda1 = Soda("апелььсин и арбуз")
soda1.show_my_drink()

soda2 = Soda(None)
soda2.show_my_drink()

#2

class TriangleChecker: #создание класса TraingleCheker
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def is_triangle(self):
        if not all(isinstance(side, (int, float)) and side > 0 for side in [self.a, self.b, self.c]):
            return "Нужно вводить только положительные числа!"
        elif any(side <= 0 for side in [self.a, self.b, self.c]):
            return "С отрицательными числами ничего не выйдет!"
        elif self.a + self.b > self.c and self.b + self.c > self.a and self.c + self.a > self.b:
            return "Ура, можно построить треугольник!"
        else:
            return "Жаль, но из этих отрезков треугольник не сделать."




triangle1 = TriangleChecker(3, 4, 5)
print(triangle1.is_triangle())

triangle2 = TriangleChecker(-2, 3, 4)
print(triangle2.is_triangle())

triangle3 = TriangleChecker(1, "2", 3)
print(triangle3.is_triangle())

triangle4 = TriangleChecker(1, 1, 10)
print(triangle4.is_triangle())


#3

class Nikola: #создание класса Nikola
    def __init__(self, name, age):
        if "николай" not in name.lower():
            self.name = f"Я не {name}, а Николай"
        else:
            self.name = name
        self.age = age

    def __str__(self):
        return f"Меня зовут {self.name} и мне {self.age} лет"


nikola1 = Nikola("Николай", 25)
print(nikola1)

nikola2 = Nikola("Максим", 30)
print(nikola2)

#4

class RealString:  #создание класса RealString
    def __init__(self, string):
        self.string = string

    def __lt__(self, other):
        return len(self.string) < len(str(other))

    def __gt__(self, other):
        return len(self.string) > len(str(other))

    def __eq__(self, other):
        return len(self.string) == len(str(other))

    def __add__(self, other):
        return len(self.string) + len(str(other))


str1 = RealString("Apple")
str2 = RealString("Яблоко")
str3 = RealString("Orange")

print(str1 < str2)  
print(str1 > str3)
print(str2 == "Апельсин")

print(str1 + "Banana")
print(str2 + str3)
#5

def generate_pascal_triangle(n): #создание функции generate_pascal_triangle
    triangle = []
    for i in range(n):
        row = [0] * (i + 1) 
        row[0] = row[-1] = 1 
        for j in range(1, i):
            row[j] = triangle[i-1][j-1] + triangle[i-1][j]
        triangle.append(row)
    return triangle


import pytest

def test_generate_pascal_triangle():
    assert generate_pascal_triangle(0) == []
    assert generate_pascal_triangle(1) == [[1]]
    assert generate_pascal_triangle(2) == [[1], [1, 1]]
    assert generate_pascal_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]

    with pytest.raises(TypeError):
        generate_pascal_triangle(3.5)
        generate_pascal_triangle("3")
    
    with pytest.raises(ValueError):
        generate_pascal_triangle(-1)
        generate_pascal_triangle(1000)